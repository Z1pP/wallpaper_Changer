import asyncio
from pathlib import Path
from typing import Optional

import aiohttp
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QKeySequence, QPixmap, QShortcut, QImage
from PyQt6.QtWidgets import QFileDialog, QHBoxLayout, QMainWindow, QVBoxLayout, QWidget

from anime_wallpaper_changer.core.config import Config
from anime_wallpaper_changer.core.parser import ParsingError, WallpapersCraftParser
from anime_wallpaper_changer.core.saver import ImageSaver
from anime_wallpaper_changer.core.wallpaper import WallpaperSetter
from anime_wallpaper_changer.core.effects import ImageEffect
from anime_wallpaper_changer.ui.components import (
    PreviewLabel,
    StyledButton,
    StyledComboBox,
    StyledLabel,
    StyledProgressBar,
    TitleBar,
    EffectPanel,
)
from anime_wallpaper_changer.ui.styles import style_manager
from anime_wallpaper_changer.utils.constants import CATEGORIES, RESOLUTIONS
from anime_wallpaper_changer.utils.logger import setup_logger

logger = setup_logger(__name__)


class MainWindow(QMainWindow):
    def __init__(self) -> None:
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setFixedSize(800, 600)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config = Config()
        self.parser = WallpapersCraftParser(self.config)
        self.saver = ImageSaver(self.config.OUTPUT_DIR)
        self.wallpaper_setter = WallpaperSetter()
        self.current_wallpaper: Optional[Path] = None

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        central_widget.setObjectName("central")
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # –î–æ–±–∞–≤–ª—è–µ–º TitleBar
        self.title_bar = TitleBar(self)
        main_layout.addWidget(self.title_bar)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(20)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–µ–π
        self._init_left_panel(content_layout)
        self._init_right_panel(content_layout)

        main_layout.addWidget(content_widget)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet(style_manager.get_styles())

    def _init_left_panel(self, parent_layout: QHBoxLayout) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        left_container = QWidget()
        left_container.setStyleSheet("""
            QWidget {
                background-color: #2D2D2D;
                border-radius: 10px;
                padding: 10px;
            }
        """)
        left_layout = QVBoxLayout(left_container)
        left_layout.setSpacing(15)

        # –ü—Ä–µ–≤—å—é
        preview_label = StyledLabel("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:", centered=True)
        left_layout.addWidget(preview_label)

        self.preview_label = PreviewLabel()
        self.preview_label.setFixedSize(350, 200)
        left_layout.addWidget(
            self.preview_label, alignment=Qt.AlignmentFlag.AlignCenter
        )

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–µ–≤—å—é
        buttons_layout = QVBoxLayout()
        buttons_layout.setSpacing(10)

        self.download_button = StyledButton("üîÑ –°–∫–∞—á–∞—Ç—å –æ–±–æ–∏", width=200)
        self.download_button.clicked.connect(self.handle_download)
        buttons_layout.addWidget(
            self.download_button, alignment=Qt.AlignmentFlag.AlignCenter
        )

        self.set_wallpaper_button = StyledButton("üñº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –æ–±–æ–∏", width=200)
        self.set_wallpaper_button.clicked.connect(self.set_wallpaper)
        self.set_wallpaper_button.setEnabled(False)
        buttons_layout.addWidget(
            self.set_wallpaper_button, alignment=Qt.AlignmentFlag.AlignCenter
        )

        left_layout.addLayout(buttons_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å
        self.progress_bar = StyledProgressBar(width=300)
        left_layout.addWidget(self.progress_bar)

        self.status_label = StyledLabel("", centered=True)
        left_layout.addWidget(self.status_label)

        parent_layout.addWidget(left_container)

    def _init_right_panel(self, parent_layout: QHBoxLayout) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        right_container = QWidget()
        right_layout = QVBoxLayout(right_container)
        right_layout.setSpacing(20)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_container = QWidget()
        settings_container.setStyleSheet("""
            QWidget {
                background-color: #2D2D2D;
                border-radius: 10px;
                padding: 10px;
            }
        """)
        settings_layout = QVBoxLayout(settings_container)
        settings_layout.setSpacing(10)

        settings_title = StyledLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", centered=True)
        settings_title.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 14px;
                font-weight: bold;
                margin-bottom: 5px;
            }
        """)
        settings_layout.addWidget(settings_title)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_label = StyledLabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", centered=False)
        settings_layout.addWidget(category_label)
        self.category_combo = StyledComboBox(list(CATEGORIES.keys()), width=300)
        settings_layout.addWidget(self.category_combo)

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        resolution_label = StyledLabel("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", centered=False)
        settings_layout.addWidget(resolution_label)
        self.resolution_combo = StyledComboBox(list(RESOLUTIONS.keys()), width=300)
        settings_layout.addWidget(self.resolution_combo)

        right_layout.addWidget(settings_container)

        # –ü–∞–Ω–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        self.effect_panel = EffectPanel()
        self.effect_panel.effect_combo.addItems(ImageEffect.get_available_effects())
        self.effect_panel.preview_button.clicked.connect(self._preview_effect)
        self.effect_panel.apply_button.clicked.connect(self._apply_effect)
        self.effect_panel.reset_button.clicked.connect(self._reset_effect)
        self.effect_panel.intensity_slider.slider.valueChanged.connect(
            self._preview_effect
        )
        right_layout.addWidget(self.effect_panel)

        parent_layout.addWidget(right_container)

    def _setup_shortcuts(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Ctrl+D - –°–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±–æ–∏
        download_shortcut = QShortcut(QKeySequence("Ctrl+D"), self)
        download_shortcut.activated.connect(self.handle_download)
        self.download_button.setToolTip("–°–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±–æ–∏ (Ctrl+D)")

        # Ctrl+S - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –æ–±–æ–∏
        set_wallpaper_shortcut = QShortcut(QKeySequence("Ctrl+S"), self)
        set_wallpaper_shortcut.activated.connect(self.set_wallpaper)
        self.set_wallpaper_button.setToolTip("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –æ–±–æ–∏ (Ctrl+S)")

        # Ctrl+O - –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
        choose_dir_shortcut = QShortcut(QKeySequence("Ctrl+O"), self)
        choose_dir_shortcut.activated.connect(self.choose_output_directory)
        self.choose_dir_button.setToolTip("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Ctrl+O)")

        # Esc - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        close_shortcut = QShortcut(QKeySequence("Esc"), self)
        close_shortcut.activated.connect(self.close)

    def choose_output_directory(self) -> None:
        """–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        directory = QFileDialog.getExistingDirectory(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            str(self.config.OUTPUT_DIR),
            QFileDialog.Option.ShowDirsOnly,
        )

        if directory:
            new_path = Path(directory)
            self.config.OUTPUT_DIR = new_path
            self.saver = ImageSaver(self.config.OUTPUT_DIR)
            self.output_dir_label.setText(str(new_path))
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {new_path}")

    def on_category_changed(self, category_text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.status_label.setText(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_text}")

    def on_resolution_changed(self, resolution_text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
        self.status_label.setText(f"–í—ã–±—Ä–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution_text}")

    def update_preview(self) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.current_wallpaper and self.current_wallpaper.exists():
            pixmap = QPixmap(str(self.current_wallpaper))
            scaled_pixmap = pixmap.scaled(
                self.preview_label.size(),
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation,
            )
            self.preview_label.setPixmap(scaled_pixmap)

    def set_wallpaper(self) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –æ–±–æ–µ–≤"""
        if not self.current_wallpaper:
            self.status_label.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        effect_name = self.effect_panel.effect_combo.currentText()
        intensity = self.effect_panel.intensity_slider.get_value()

        result = ImageEffect.apply_effect(
            self.current_wallpaper,
            effect_name,
            intensity,
            output_path=self.current_wallpaper,
        )

        if result:
            if self.wallpaper_setter.set_wallpaper(self.current_wallpaper):
                self.status_label.setText("‚úÖ –û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ–∏")
        else:
            self.status_label.setText(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"
            )

    def handle_download(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if not self.download_button.isEnabled():
            return
        asyncio.create_task(self._start_download())

    async def _start_download(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ–µ–≤"""
        self.download_button.setEnabled(False)
        self.set_wallpaper_button.setEnabled(False)
        self.progress_bar.show()
        self.status_label.setText("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")

        try:
            category = self.category_combo.currentText()
            resolution = self.resolution_combo.currentText()

            async with aiohttp.ClientSession() as session:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∞
                self.parser.catalog_path = self.config.get_catalog_path(
                    CATEGORIES[category], RESOLUTIONS[resolution]
                )

                # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.status_label.setText("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                image_url = await self.parser.get_random_image_url()
                self.progress_bar.setValue(30)

                if not image_url:
                    raise ParsingError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.status_label.setText("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                image_data = await self.parser.download_image(image_url, session)
                self.progress_bar.setValue(60)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.status_label.setText("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                filename = image_url.split("/")[-1]
                self.current_wallpaper = await self.saver.save_image(
                    image_data, filename
                )
                self.progress_bar.setValue(90)

                if not self.current_wallpaper:
                    raise ParsingError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

                self.update_preview()
                self.progress_bar.setValue(100)
                self.set_wallpaper_button.setEnabled(True)
                self.status_label.setText("‚ú® –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.download_button.setEnabled(True)
            QTimer.singleShot(2000, self.progress_bar.hide)

    def apply_theme(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
        self.setStyleSheet(style_manager.get_styles())

    def _preview_effect(self) -> None:
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        if not self.current_wallpaper:
            self.status_label.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        effect_name = self.effect_panel.effect_combo.currentText()
        intensity = self.effect_panel.intensity_slider.get_value()

        preview_data = ImageEffect.preview_effect(
            self.current_wallpaper, effect_name, intensity
        )

        if preview_data:
            # –°–æ–∑–¥–∞–µ–º QImage –∏–∑ –±–∞–π—Ç–æ–≤
            image = QImage.fromData(preview_data)
            if not image.isNull():
                pixmap = QPixmap.fromImage(image)
                self.preview_label.setPixmap(
                    pixmap.scaled(
                        self.preview_label.size(),
                        Qt.AspectRatioMode.KeepAspectRatio,
                        Qt.TransformationMode.SmoothTransformation,
                    )
                )
                self.status_label.setText("‚ú® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω")
            else:
                self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é")
        else:
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞")

    def _apply_effect(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        if not self.current_wallpaper:
            self.status_label.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        effect_name = self.effect_panel.effect_combo.currentText()
        intensity = self.effect_panel.intensity_slider.get_value()

        result = ImageEffect.apply_effect(
            self.current_wallpaper, effect_name, intensity
        )

        if result:
            self.status_label.setText("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            self.update_preview()
        else:
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞")

    def _reset_effect(self) -> None:
        """–°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if not self.current_wallpaper:
            self.status_label.setText("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.update_preview()
        self.status_label.setText("‚Ü∫ –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã")
